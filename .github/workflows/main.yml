name: Compile and Build AZMusicDownloader
permissions: write-all

on:
  workflow_dispatch:  # 只保留手动触发器
    # 指定一个可选的输入参数，例如版本号
    inputs:
      version:
        description: '编译版本号'
        required: true
        default: '2.6.103'  # 默认版本号

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python 3.11
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Install MinGW64 and nuitka
      run: |
        choco install mingw -y
        python -m pip install --upgrade pip
        pip install Nuitka

    - name: Download and Extract GCC (winlibs)
      run: |
        # 下载指定版本的 winlibs GCC 版本
        Invoke-WebRequest -Uri https://github.com/brechtsanders/winlibs_mingw/releases/download/14.2.0posix-19.1.1-12.0.0-msvcrt-r2/winlibs-i686-posix-dwarf-gcc-14.2.0-mingw-w64msvcrt-12.0.0-r2.7z -OutFile gcc.7z
        # 解压文件
        7z x gcc.7z -oC:\nuitka\gcc
        # 配置 PATH 环境变量以使用此 GCC 版本
        $gccBinPath = "C:\nuitka\gcc\gcc-14.2.0-posix-19.1.1-12.0.0-msvcrt-r2\bin"
        $env:PATH = "$gccBinPath;$env:PATH"
        gcc --version

    - name: Compile with Nuitka
      continue-on-error: true
      run: |
        $VERSION_NUMBER="${{ github.event.inputs.version }}"

        # Compile with Nuitka
        nuitka --standalone --windows-console-mode=disable --include-package=qfluentwidgets --include-module=qfluentwidgets --mingw64 --plugin-enable=pyqt5 --windows-icon-from-ico=icon.ico --windows-company-name="AZ Studio" --windows-product-name=AZMusicDownloader --windows-file-version=$VERSION_NUMBER --windows-product-version=$VERSION_NUMBER --windows-file-description=AZMusicDownloader --gcc "C:\\nuitka\\gcc\\gcc-14.2.0-posix-19.1.1-12.0.0-msvcrt-r2\\bin\\gcc.exe" MusicDownloader.py
        mkdir -p MusicDownloader.dist/resource  # 创建目标目录
        cp -r resource/. MusicDownloader.dist/resource  # 复制 resource 文件夹及其内容到目标目录

    - name: Archive crash report
      run: |
          if [ -f nuitka-crash-report.xml ]; then
            # 创建一个目录保存崩溃报告
            mkdir -p crash_reports
            mv nuitka-crash-report.xml crash_reports/

      # 上传崩溃报告文件作为 Artifact
    - name: Upload crash report as artifact
      if: ${{ steps.nuitka_compile.outcome == 'failure' }}  # 仅当编译步骤失败时上传
      uses: actions/upload-artifact@v3
      with:
        name: nuitka-crash-report
        path: crash_reports/

    - name: 打包和发布
      run: |
        mkdir -p output
        Compress-Archive -Path MusicDownloader.dist -DestinationPath "./output/$VERSION_NUMBER.zip"


